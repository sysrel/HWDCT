/* Generated by Yosys 0.14+42 (git sha1 1586000, clang 3.8.0-2ubuntu4 -fPIC -Os) */

(* src = "tap_top.v:73.1-530.10" *)
module tap_top(tms_pad_i, tck_pad_i, trstn_pad_i, tdi_pad_i, tdo_pad_o, tdo_padoe_o, test_logic_reset_o, run_test_idle_o, shift_dr_o, pause_dr_o, update_dr_o, capture_dr_o, extest_select_o, sample_preload_select_o, mbist_select_o, debug_select_o, tdi_o, debug_tdo_i, bs_chain_tdo_i, mbist_tdo_i);
  (* src = "tap_top.v:438.1-448.4" *)
  wire _000_;
  (* src = "tap_top.v:408.1-419.4" *)
  wire [31:0] _001_;
  (* src = "tap_top.v:366.1-376.4" *)
  wire [3:0] _002_;
  (* src = "tap_top.v:382.1-390.4" *)
  wire [3:0] _003_;
  (* src = "tap_top.v:520.1-523.4" *)
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  (* src = "tap_top.v:205.11-205.20" *)
  reg [3:0] TAP_state = 4'hf;
  (* src = "tap_top.v:133.9-133.23" *)
  input bs_chain_tdo_i /*verilator public*/;
  wire bs_chain_tdo_i;
  (* src = "tap_top.v:436.7-436.17" *)
  reg bypass_reg;
  (* src = "tap_top.v:435.7-435.19" *)
  wire bypassed_tdo;
  (* src = "tap_top.v:140.9-140.19" *)
  wire capture_dr;
  (* src = "tap_top.v:120.9-120.21" *)
  output capture_dr_o;
  wire capture_dr_o;
  (* src = "tap_top.v:159.9-159.21" *)
  wire debug_select;
  (* src = "tap_top.v:126.9-126.23" *)
  output debug_select_o;
  wire debug_select_o;
  (* src = "tap_top.v:132.9-132.20" *)
  input debug_tdo_i;
  wire debug_tdo_i;
  (* src = "tap_top.v:155.9-155.22" *)
  wire extest_select;
  (* src = "tap_top.v:123.9-123.24" *)
  output extest_select_o;
  wire extest_select_o;
  (* src = "tap_top.v:405.12-405.22" *)
  reg [31:0] idcode_reg;
  (* src = "tap_top.v:406.13-406.23" *)
  wire idcode_tdo;
  (* src = "tap_top.v:364.23-364.38" *)
  wire instruction_tdo;
  (* src = "tap_top.v:362.14-362.21" *)
  reg [3:0] jtag_ir;
  (* src = "tap_top.v:363.14-363.29" *)
  reg [3:0] latched_jtag_ir;
  (* src = "tap_top.v:158.9-158.21" *)
  wire mbist_select;
  (* src = "tap_top.v:125.9-125.23" *)
  output mbist_select_o;
  wire mbist_select_o;
  (* src = "tap_top.v:134.9-134.20" *)
  input mbist_tdo_i;
  wire mbist_tdo_i;
  (* src = "tap_top.v:206.11-206.25" *)
  wire [3:0] next_TAP_state;
  (* src = "tap_top.v:143.9-143.17" *)
  wire pause_dr;
  (* src = "tap_top.v:118.9-118.19" *)
  output pause_dr_o;
  wire pause_dr_o;
  (* src = "tap_top.v:138.9-138.22" *)
  wire run_test_idle;
  (* src = "tap_top.v:116.9-116.24" *)
  output run_test_idle_o;
  wire run_test_idle_o;
  (* src = "tap_top.v:156.9-156.30" *)
  wire sample_preload_select;
  (* src = "tap_top.v:124.9-124.32" *)
  output sample_preload_select_o;
  wire sample_preload_select_o;
  (* src = "tap_top.v:141.9-141.17" *)
  wire shift_dr;
  (* src = "tap_top.v:117.9-117.19" *)
  output shift_dr_o;
  wire shift_dr_o;
  (* src = "tap_top.v:108.9-108.18" *)
  input tck_pad_i;
  wire tck_pad_i;
  (* src = "tap_top.v:129.9-129.14" *)
  output tdi_o;
  wire tdi_o;
  (* src = "tap_top.v:110.9-110.18" *)
  input tdi_pad_i;
  wire tdi_pad_i;
  (* src = "tap_top.v:490.5-490.16" *)
  wire tdo_mux_out;
  (* src = "tap_top.v:111.9-111.18" *)
  output tdo_pad_o;
  reg tdo_pad_o;
  (* src = "tap_top.v:112.9-112.20" *)
  output tdo_padoe_o;
  reg tdo_padoe_o;
  (* src = "tap_top.v:137.9-137.25" *)
  wire test_logic_reset;
  (* src = "tap_top.v:115.9-115.27" *)
  output test_logic_reset_o;
  wire test_logic_reset_o;
  (* src = "tap_top.v:107.9-107.18" *)
  input tms_pad_i;
  wire tms_pad_i;
  (* src = "tap_top.v:109.9-109.20" *)
  input trstn_pad_i;
  wire trstn_pad_i;
  (* src = "tap_top.v:145.9-145.18" *)
  wire update_dr;
  (* src = "tap_top.v:119.9-119.20" *)
  output update_dr_o;
  wire update_dr_o;
  assign _009_ = TAP_state[0] & ~(TAP_state[1]);
  assign _010_ = TAP_state[2] & TAP_state[3];
  assign _011_ = _010_ & _009_;
  assign _012_ = TAP_state[0] | TAP_state[1];
  assign _013_ = TAP_state[2] | ~(TAP_state[3]);
  assign _014_ = ~(_013_ | _012_);
  assign _015_ = ~(_014_ | _011_);
  assign _016_ = ~(TAP_state[0] & TAP_state[1]);
  assign _017_ = _016_ | _013_;
  assign _018_ = _009_ & ~(_013_);
  assign _019_ = _018_ | ~(_017_);
  assign _020_ = _019_ | ~(_015_);
  assign _021_ = TAP_state[0] | ~(TAP_state[1]);
  assign _022_ = ~(_021_ | _013_);
  assign _023_ = _010_ & ~(_021_);
  assign _024_ = _023_ | _022_;
  assign _025_ = TAP_state[3] | ~(TAP_state[2]);
  assign _026_ = ~(_025_ | _012_);
  assign _027_ = _009_ & ~(_025_);
  assign _028_ = _027_ | _026_;
  assign _029_ = _028_ | _024_;
  assign _030_ = ~(_029_ | _020_);
  assign _031_ = ~(TAP_state[2] | TAP_state[3]);
  assign _032_ = ~(_025_ | _021_);
  assign _033_ = ~(_025_ | _016_);
  assign _034_ = _033_ | _032_;
  assign _035_ = _010_ & ~(_012_);
  assign _036_ = _035_ | _034_;
  assign _037_ = _036_ | _031_;
  assign test_logic_reset_o = _030_ & ~(_037_);
  assign _038_ = _026_ | _022_;
  assign _039_ = TAP_state[2] | TAP_state[3];
  assign _040_ = ~(_039_ | _012_);
  assign _041_ = _040_ | _027_;
  assign _042_ = _041_ | _038_;
  assign _043_ = _042_ | _020_;
  assign _044_ = ~(_039_ | _016_);
  assign _045_ = _009_ & ~(_039_);
  assign _046_ = _045_ | _044_;
  assign _047_ = _039_ | _021_;
  assign _048_ = _047_ & ~(_032_);
  assign _049_ = _048_ & ~(_046_);
  assign _050_ = _035_ | _033_;
  assign _051_ = _010_ & ~(_016_);
  assign _052_ = _051_ | _050_;
  assign _053_ = _049_ & ~(_052_);
  assign _054_ = _053_ & ~(_043_);
  assign _055_ = _054_ | test_logic_reset_o;
  assign _056_ = _026_ | _023_;
  assign _057_ = _056_ | _041_;
  assign _058_ = _057_ | _020_;
  assign _059_ = _053_ & ~(_058_);
  assign _005_ = _059_ | _055_;
  assign _006_ = test_logic_reset_o | _011_;
  assign _060_ = ~test_logic_reset_o;
  assign _061_ = latched_jtag_ir[0] | ~(latched_jtag_ir[1]);
  assign _062_ = ~(latched_jtag_ir[2] | latched_jtag_ir[3]);
  assign _063_ = _062_ & ~(_061_);
  assign _064_ = _052_ | _031_;
  assign capture_dr_o = _030_ & ~(_064_);
  assign _065_ = capture_dr_o & _063_;
  assign _066_ = _065_ | ~(_060_);
  assign _067_ = _044_ | _040_;
  assign _068_ = _032_ | _045_;
  assign _069_ = _068_ | _067_;
  assign _070_ = _069_ | _052_;
  assign shift_dr_o = _030_ & ~(_070_);
  assign _071_ = shift_dr_o & _063_;
  assign _007_ = _071_ | _066_;
  assign _072_ = latched_jtag_ir[0] | latched_jtag_ir[1];
  assign extest_select_o = _062_ & ~(_072_);
  assign _073_ = latched_jtag_ir[1] | ~(latched_jtag_ir[0]);
  assign sample_preload_select_o = _062_ & ~(_073_);
  assign _074_ = ~(sample_preload_select_o | extest_select_o);
  assign _075_ = latched_jtag_ir[2] | ~(latched_jtag_ir[3]);
  assign mbist_select_o = ~(_075_ | _073_);
  assign debug_select_o = ~(_075_ | _072_);
  assign _076_ = debug_select_o | mbist_select_o;
  assign _077_ = _076_ | ~(_074_);
  assign _078_ = _077_ | _063_;
  assign _079_ = capture_dr_o & ~(_078_);
  assign _080_ = _079_ | ~(_060_);
  assign _081_ = shift_dr_o & ~(_078_);
  assign _008_ = _081_ | _080_;
  assign _082_ = _027_ | _011_;
  assign _083_ = _082_ | _035_;
  assign _084_ = _083_ | _014_;
  assign _085_ = ~(_084_ | _019_);
  assign _086_ = _026_ | _024_;
  assign _087_ = _086_ | _067_;
  assign _088_ = _085_ & ~(_087_);
  assign _089_ = ~_045_;
  assign _090_ = ~(_048_ & _089_);
  assign _091_ = _090_ | _033_;
  assign _092_ = _088_ & ~(_091_);
  assign _093_ = ~tms_pad_i;
  assign _094_ = _083_ & ~(_093_);
  assign _095_ = _014_ & ~(_093_);
  assign _096_ = _095_ | _094_;
  assign _097_ = _093_ & ~(_017_);
  assign _098_ = _097_ | _018_;
  assign _099_ = _098_ | _096_;
  assign _100_ = ~(_023_ | _022_);
  assign _101_ = tms_pad_i & ~(_100_);
  assign _102_ = _026_ & ~(_093_);
  assign _103_ = _102_ | _101_;
  assign _104_ = tms_pad_i ? _040_ : _044_;
  assign _105_ = _104_ | _103_;
  assign _106_ = _105_ | _099_;
  assign _107_ = tms_pad_i & ~(_048_);
  assign _108_ = _107_ | _045_;
  assign _109_ = _108_ | _106_;
  assign next_TAP_state[0] = _092_ ? tms_pad_i : _109_;
  assign _110_ = tms_pad_i ? _083_ : _014_;
  assign _111_ = _018_ & ~(tms_pad_i);
  assign _112_ = _111_ | _097_;
  assign _113_ = _112_ | _110_;
  assign _114_ = _093_ & ~(_100_);
  assign _115_ = _114_ | _026_;
  assign _116_ = _044_ & ~(tms_pad_i);
  assign _117_ = _040_ & ~(tms_pad_i);
  assign _118_ = _117_ | _116_;
  assign _119_ = _118_ | _115_;
  assign _120_ = _119_ | _113_;
  assign _121_ = _045_ & ~(tms_pad_i);
  assign _122_ = _093_ & ~(_048_);
  assign _123_ = _122_ | _121_;
  assign _124_ = _033_ & ~(tms_pad_i);
  assign _125_ = _124_ | _123_;
  assign _126_ = _125_ | _120_;
  assign next_TAP_state[1] = _092_ ? tms_pad_i : _126_;
  assign _127_ = _095_ | _083_;
  assign _128_ = _018_ & ~(_093_);
  assign _129_ = _128_ | _127_;
  assign _130_ = _040_ & ~(_093_);
  assign _131_ = _130_ | _026_;
  assign _132_ = _131_ | _129_;
  assign _133_ = _045_ & ~(_093_);
  assign _134_ = _133_ | _033_;
  assign _135_ = _134_ | _132_;
  assign next_TAP_state[2] = _135_ | _092_;
  assign _136_ = _083_ & ~(tms_pad_i);
  assign _137_ = _136_ | _014_;
  assign _138_ = _137_ | _019_;
  assign _139_ = _138_ | _086_;
  assign next_TAP_state[3] = _139_ | _092_;
  assign _140_ = _074_ & ~(mbist_select_o);
  assign _141_ = debug_select_o | _063_;
  assign _142_ = _140_ & ~(_141_);
  assign _143_ = mbist_select_o & mbist_tdo_i;
  assign _144_ = bs_chain_tdo_i & ~(_074_);
  assign _145_ = _144_ | _143_;
  assign _146_ = debug_select_o & debug_tdo_i;
  assign _147_ = _063_ & idcode_reg[0];
  assign _148_ = _147_ | _146_;
  assign _149_ = _148_ | _145_;
  assign _150_ = _142_ ? bypass_reg : _149_;
  assign tdo_mux_out = _059_ ? jtag_ir[0] : _150_;
  assign _151_ = _065_ | idcode_reg[1];
  assign _001_[0] = _151_ | ~(_060_);
  assign _152_ = _065_ | idcode_reg[2];
  assign _001_[1] = _152_ | ~(_060_);
  assign _153_ = _065_ | ~(idcode_reg[3]);
  assign _001_[2] = _060_ & ~(_153_);
  assign _154_ = _065_ | ~(idcode_reg[4]);
  assign _001_[3] = _060_ & ~(_154_);
  assign _155_ = _065_ | ~(idcode_reg[5]);
  assign _001_[4] = _060_ & ~(_155_);
  assign _156_ = _065_ | ~(idcode_reg[6]);
  assign _001_[5] = _060_ & ~(_156_);
  assign _157_ = _065_ | idcode_reg[7];
  assign _001_[6] = _157_ | ~(_060_);
  assign _158_ = _065_ | idcode_reg[8];
  assign _001_[7] = _158_ | ~(_060_);
  assign _159_ = _065_ | idcode_reg[9];
  assign _001_[8] = _159_ | ~(_060_);
  assign _160_ = _065_ | ~(idcode_reg[10]);
  assign _001_[9] = _060_ & ~(_160_);
  assign _161_ = _065_ | ~(idcode_reg[11]);
  assign _001_[10] = _060_ & ~(_161_);
  assign _162_ = _065_ | ~(idcode_reg[12]);
  assign _001_[11] = _060_ & ~(_162_);
  assign _163_ = _065_ | idcode_reg[13];
  assign _001_[12] = _163_ | ~(_060_);
  assign _164_ = _065_ | ~(idcode_reg[14]);
  assign _001_[13] = _060_ & ~(_164_);
  assign _165_ = _065_ | ~(idcode_reg[15]);
  assign _001_[14] = _060_ & ~(_165_);
  assign _166_ = _065_ | ~(idcode_reg[16]);
  assign _001_[15] = _060_ & ~(_166_);
  assign _167_ = _065_ | idcode_reg[17];
  assign _001_[16] = _167_ | ~(_060_);
  assign _168_ = _065_ | ~(idcode_reg[18]);
  assign _001_[17] = _060_ & ~(_168_);
  assign _169_ = _065_ | idcode_reg[19];
  assign _001_[18] = _169_ | ~(_060_);
  assign _170_ = _065_ | ~(idcode_reg[20]);
  assign _001_[19] = _060_ & ~(_170_);
  assign _171_ = _065_ | idcode_reg[21];
  assign _001_[20] = _171_ | ~(_060_);
  assign _172_ = _065_ | ~(idcode_reg[22]);
  assign _001_[21] = _060_ & ~(_172_);
  assign _173_ = _065_ | ~(idcode_reg[23]);
  assign _001_[22] = _060_ & ~(_173_);
  assign _174_ = _065_ | idcode_reg[24];
  assign _001_[23] = _174_ | ~(_060_);
  assign _175_ = _065_ | ~(idcode_reg[25]);
  assign _001_[24] = _060_ & ~(_175_);
  assign _176_ = _065_ | ~(idcode_reg[26]);
  assign _001_[25] = _060_ & ~(_176_);
  assign _177_ = _065_ | idcode_reg[27];
  assign _001_[26] = _177_ | ~(_060_);
  assign _178_ = _065_ | ~(idcode_reg[28]);
  assign _001_[27] = _060_ & ~(_178_);
  assign _179_ = _065_ | idcode_reg[29];
  assign _001_[28] = _179_ | ~(_060_);
  assign _180_ = _065_ | ~(idcode_reg[30]);
  assign _001_[29] = _060_ & ~(_180_);
  assign _181_ = _065_ | ~(idcode_reg[31]);
  assign _001_[30] = _060_ & ~(_181_);
  assign _182_ = ~tdi_pad_i;
  assign _183_ = _065_ | _182_;
  assign _001_[31] = _060_ & ~(_183_);
  assign _003_[0] = jtag_ir[0] & ~(test_logic_reset_o);
  assign _003_[1] = test_logic_reset_o | jtag_ir[1];
  assign _003_[2] = jtag_ir[2] & ~(test_logic_reset_o);
  assign _003_[3] = jtag_ir[3] & ~(test_logic_reset_o);
  assign _184_ = ~(_054_ | jtag_ir[1]);
  assign _002_[0] = _060_ & ~(_184_);
  assign _185_ = _054_ | ~(jtag_ir[2]);
  assign _002_[1] = _060_ & ~(_185_);
  assign _186_ = ~(_054_ | jtag_ir[3]);
  assign _002_[2] = _060_ & ~(_186_);
  assign _187_ = _054_ | _182_;
  assign _002_[3] = _060_ & ~(_187_);
  assign _188_ = _040_ | _026_;
  assign _189_ = _188_ | _024_;
  assign _190_ = _189_ | _020_;
  assign update_dr_o = _053_ & ~(_190_);
  assign _191_ = ~(_045_ | _040_);
  assign _192_ = ~(_191_ & _048_);
  assign _193_ = _192_ | _052_;
  assign pause_dr_o = _030_ & ~(_193_);
  assign _194_ = _051_ | _034_;
  assign _195_ = _194_ | _031_;
  assign run_test_idle_o = _030_ & ~(_195_);
  assign _004_ = shift_dr_o | _059_;
  assign _196_ = _079_ | _182_;
  assign _000_ = _060_ & ~(_196_);
  (* src = "tap_top.v:366.1-376.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) jtag_ir[0] <= 1'h0;
    else if (_005_) jtag_ir[0] <= _002_[0];
  (* src = "tap_top.v:366.1-376.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) jtag_ir[1] <= 1'h0;
    else if (_005_) jtag_ir[1] <= _002_[1];
  (* src = "tap_top.v:366.1-376.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) jtag_ir[2] <= 1'h0;
    else if (_005_) jtag_ir[2] <= _002_[2];
  (* src = "tap_top.v:366.1-376.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) jtag_ir[3] <= 1'h0;
    else if (_005_) jtag_ir[3] <= _002_[3];
  (* src = "tap_top.v:520.1-523.4" *)
  always @(posedge tck_pad_i)
    tdo_padoe_o <= _004_;
  (* src = "tap_top.v:513.1-516.4" *)
  always @(negedge tck_pad_i)
    tdo_pad_o <= tdo_mux_out;
  (* src = "tap_top.v:438.1-448.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) bypass_reg <= 1'h0;
    else if (_008_) bypass_reg <= _000_;
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[0] <= 1'h1;
    else if (_007_) idcode_reg[0] <= _001_[0];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[1] <= 1'h1;
    else if (_007_) idcode_reg[1] <= _001_[1];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[2] <= 1'h0;
    else if (_007_) idcode_reg[2] <= _001_[2];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[3] <= 1'h0;
    else if (_007_) idcode_reg[3] <= _001_[3];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[4] <= 1'h0;
    else if (_007_) idcode_reg[4] <= _001_[4];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[5] <= 1'h0;
    else if (_007_) idcode_reg[5] <= _001_[5];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[6] <= 1'h1;
    else if (_007_) idcode_reg[6] <= _001_[6];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[7] <= 1'h1;
    else if (_007_) idcode_reg[7] <= _001_[7];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[8] <= 1'h1;
    else if (_007_) idcode_reg[8] <= _001_[8];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[9] <= 1'h0;
    else if (_007_) idcode_reg[9] <= _001_[9];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[10] <= 1'h0;
    else if (_007_) idcode_reg[10] <= _001_[10];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[11] <= 1'h0;
    else if (_007_) idcode_reg[11] <= _001_[11];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[12] <= 1'h1;
    else if (_007_) idcode_reg[12] <= _001_[12];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[13] <= 1'h0;
    else if (_007_) idcode_reg[13] <= _001_[13];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[14] <= 1'h0;
    else if (_007_) idcode_reg[14] <= _001_[14];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[15] <= 1'h0;
    else if (_007_) idcode_reg[15] <= _001_[15];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[16] <= 1'h1;
    else if (_007_) idcode_reg[16] <= _001_[16];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[17] <= 1'h0;
    else if (_007_) idcode_reg[17] <= _001_[17];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[18] <= 1'h1;
    else if (_007_) idcode_reg[18] <= _001_[18];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[19] <= 1'h0;
    else if (_007_) idcode_reg[19] <= _001_[19];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[20] <= 1'h1;
    else if (_007_) idcode_reg[20] <= _001_[20];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[21] <= 1'h0;
    else if (_007_) idcode_reg[21] <= _001_[21];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[22] <= 1'h0;
    else if (_007_) idcode_reg[22] <= _001_[22];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[23] <= 1'h1;
    else if (_007_) idcode_reg[23] <= _001_[23];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[24] <= 1'h0;
    else if (_007_) idcode_reg[24] <= _001_[24];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[25] <= 1'h0;
    else if (_007_) idcode_reg[25] <= _001_[25];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[26] <= 1'h1;
    else if (_007_) idcode_reg[26] <= _001_[26];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[27] <= 1'h0;
    else if (_007_) idcode_reg[27] <= _001_[27];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[28] <= 1'h1;
    else if (_007_) idcode_reg[28] <= _001_[28];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[29] <= 1'h0;
    else if (_007_) idcode_reg[29] <= _001_[29];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[30] <= 1'h0;
    else if (_007_) idcode_reg[30] <= _001_[30];
  (* src = "tap_top.v:408.1-419.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) idcode_reg[31] <= 1'h0;
    else if (_007_) idcode_reg[31] <= _001_[31];
  (* src = "tap_top.v:382.1-390.4" *)
  always @(negedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) latched_jtag_ir[0] <= 1'h0;
    else if (_006_) latched_jtag_ir[0] <= _003_[0];
  (* src = "tap_top.v:382.1-390.4" *)
  always @(negedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) latched_jtag_ir[1] <= 1'h1;
    else if (_006_) latched_jtag_ir[1] <= _003_[1];
  (* src = "tap_top.v:382.1-390.4" *)
  always @(negedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) latched_jtag_ir[2] <= 1'h0;
    else if (_006_) latched_jtag_ir[2] <= _003_[2];
  (* src = "tap_top.v:382.1-390.4" *)
  always @(negedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) latched_jtag_ir[3] <= 1'h0;
    else if (_006_) latched_jtag_ir[3] <= _003_[3];
  (* src = "tap_top.v:209.1-215.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) TAP_state[0] <= 1'h1;
    else TAP_state[0] <= next_TAP_state[0];
  (* src = "tap_top.v:209.1-215.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) TAP_state[1] <= 1'h1;
    else TAP_state[1] <= next_TAP_state[1];
  (* src = "tap_top.v:209.1-215.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) TAP_state[2] <= 1'h1;
    else TAP_state[2] <= next_TAP_state[2];
  (* src = "tap_top.v:209.1-215.4" *)
  always @(posedge tck_pad_i, negedge trstn_pad_i)
    if (!trstn_pad_i) TAP_state[3] <= 1'h1;
    else TAP_state[3] <= next_TAP_state[3];
  assign bypassed_tdo = bypass_reg;
  assign capture_dr = capture_dr_o;
  assign debug_select = debug_select_o;
  assign extest_select = extest_select_o;
  assign idcode_tdo = idcode_reg[0];
  assign instruction_tdo = jtag_ir[0];
  assign mbist_select = mbist_select_o;
  assign pause_dr = pause_dr_o;
  assign run_test_idle = run_test_idle_o;
  assign sample_preload_select = sample_preload_select_o;
  assign shift_dr = shift_dr_o;
  assign tdi_o = tdi_pad_i;
  assign test_logic_reset = test_logic_reset_o;
  assign update_dr = update_dr_o;
endmodule
