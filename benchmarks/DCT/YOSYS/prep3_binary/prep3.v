/* Generated by Yosys 0.9+3882 (git sha1 beeaad1, clang 3.8.0-2ubuntu4 -fPIC -Os) */

(* top =  1  *)
(* src = "prep3.v:11.1-122.10" *)
module prep3(clk, rst, in, out);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  (* src = "prep3.v:12.8-12.11" *)
  input clk;
  (* src = "prep3.v:13.14-13.16" *)
  input [7:0] in;
  (* src = "prep3.v:30.17-30.25" *)
  wire [7:0] next_out;
  (* src = "prep3.v:29.19-29.29" *)
  wire [2:0] next_state;
  (* src = "prep3.v:14.15-14.18" *)
  output [7:0] out;
  reg [7:0] out;
  (* src = "prep3.v:12.13-12.16" *)
  input rst;
  (* src = "prep3.v:29.12-29.17" *)
  reg [2:0] state/*verilator public*/;
  assign _000_ = ~(state[1] & state[0]);
  assign _001_ = state[2] & ~(_000_);
  assign _002_ = in[1] & ~(in[0]);
  assign _003_ = in[2] | ~(in[3]);
  assign _004_ = _002_ & ~(_003_);
  assign _005_ = in[4] | ~(in[5]);
  assign _006_ = in[6] | ~(in[7]);
  assign _007_ = _006_ | _005_;
  assign _008_ = _004_ & ~(_007_);
  assign _009_ = state[0] | ~(state[1]);
  assign _010_ = _009_ | state[2];
  assign _011_ = _008_ & ~(_010_);
  assign _012_ = _011_ | _001_;
  assign _013_ = state[2] & ~(_009_);
  assign _014_ = ~(_013_ | _001_);
  assign _015_ = ~state[2];
  assign _016_ = state[1] | ~(state[0]);
  assign _017_ = _016_ | _015_;
  assign _018_ = state[1] | state[0];
  assign _019_ = state[2] & ~(_018_);
  assign _020_ = _019_ | ~(_017_);
  assign _021_ = _014_ & ~(_020_);
  assign _022_ = _015_ & ~(_000_);
  assign _023_ = _022_ | ~(_010_);
  assign _024_ = _015_ & ~(_016_);
  assign _025_ = _024_ | _023_;
  assign _026_ = _025_ | ~(_021_);
  assign next_out[0] = _026_ & _012_;
  assign _027_ = ~(in[1] | in[0]);
  assign _028_ = ~(in[3] & in[2]);
  assign _029_ = _027_ & ~(_028_);
  assign _030_ = ~(in[5] & in[4]);
  assign _031_ = in[6] | in[7];
  assign _032_ = _031_ | _030_;
  assign _033_ = _029_ & ~(_032_);
  assign next_out[1] = _026_ ? _013_ : _033_;
  assign _034_ = ~(in[1] & in[0]);
  assign _035_ = _034_ | _028_;
  assign _036_ = in[5] | ~(in[4]);
  assign _037_ = _036_ | _031_;
  assign _038_ = _037_ | _035_;
  assign _039_ = _031_ | _005_;
  assign _040_ = _004_ & ~(_039_);
  assign _041_ = _038_ & ~(_040_);
  assign _042_ = ~(_041_ & _024_);
  assign next_out[2] = _026_ & ~(_042_);
  assign next_out[3] = _026_ & _022_;
  assign next_out[4] = _015_ & ~(_009_);
  assign _043_ = _010_ | _008_;
  assign _044_ = _024_ & ~(_038_);
  assign _045_ = _043_ & ~(_044_);
  assign next_out[5] = _026_ & ~(_045_);
  assign _046_ = _041_ | ~(_040_);
  assign _047_ = _024_ & ~(_046_);
  assign _048_ = _017_ & ~(_047_);
  assign next_out[6] = _026_ & ~(_048_);
  assign next_out[7] = _026_ ? _019_ : _033_;
  assign _049_ = state[2] & ~(state[0]);
  assign _050_ = state[0] & state[2];
  assign _051_ = _050_ | _049_;
  assign _052_ = _051_ | _023_;
  assign _053_ = _052_ | _024_;
  assign _054_ = _049_ | _011_;
  assign _055_ = ~(_040_ | _038_);
  assign _056_ = _024_ & ~(_055_);
  assign _057_ = _056_ | _054_;
  assign next_state[0] = _053_ ? _057_ : _033_;
  assign _058_ = _043_ & ~(_049_);
  assign _059_ = _024_ & ~(_041_);
  assign _060_ = _058_ & ~(_059_);
  assign next_state[1] = _053_ & ~(_060_);
  assign _061_ = ~state[0];
  assign next_state[2] = state[2] ? _061_ : state[1];
  (* src = "prep3.v:116.2-120.7" *)
  always @(posedge clk, negedge rst)
    if (!rst) out[0] <= 1'h0;
    else out[0] <= next_out[0];
  (* src = "prep3.v:116.2-120.7" *)
  always @(posedge clk, negedge rst)
    if (!rst) out[1] <= 1'h0;
    else out[1] <= next_out[1];
  (* src = "prep3.v:116.2-120.7" *)
  always @(posedge clk, negedge rst)
    if (!rst) out[2] <= 1'h0;
    else out[2] <= next_out[2];
  (* src = "prep3.v:116.2-120.7" *)
  always @(posedge clk, negedge rst)
    if (!rst) out[3] <= 1'h0;
    else out[3] <= next_out[3];
  (* src = "prep3.v:116.2-120.7" *)
  always @(posedge clk, negedge rst)
    if (!rst) out[4] <= 1'h0;
    else out[4] <= next_out[4];
  (* src = "prep3.v:116.2-120.7" *)
  always @(posedge clk, negedge rst)
    if (!rst) out[5] <= 1'h0;
    else out[5] <= next_out[5];
  (* src = "prep3.v:116.2-120.7" *)
  always @(posedge clk, negedge rst)
    if (!rst) out[6] <= 1'h0;
    else out[6] <= next_out[6];
  (* src = "prep3.v:116.2-120.7" *)
  always @(posedge clk, negedge rst)
    if (!rst) out[7] <= 1'h0;
    else out[7] <= next_out[7];
  (* src = "prep3.v:109.2-113.6" *)
  always @(posedge clk, negedge rst)
    if (!rst) state[0] <= 1'h0;
    else state[0] <= next_state[0];
  (* src = "prep3.v:109.2-113.6" *)
  always @(posedge clk, negedge rst)
    if (!rst) state[1] <= 1'h0;
    else state[1] <= next_state[1];
  (* src = "prep3.v:109.2-113.6" *)
  always @(posedge clk, negedge rst)
    if (!rst) state[2] <= 1'h0;
    else state[2] <= next_state[2];
endmodule
