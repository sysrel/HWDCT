/* Generated by Yosys 0.9+3882 (git sha1 beeaad1, clang 3.8.0-2ubuntu4 -fPIC -Os) */

`include "timescale.v"
(* top =  1  *)
(* src = "mixcolum.v:60.1-195.10" *)
module mixcolum(clk, reset, decrypt_i, start_i, data_i, ready_o, data_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  (* src = "mixcolum.v:61.7-61.10" *)
  input clk;
  (* src = "mixcolum.v:65.15-65.21" *)
  input [127:0] data_i;
  (* src = "mixcolum.v:132.12-132.22" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127" *)
  wire [127:0] data_i_var;
  (* src = "mixcolum.v:67.16-67.22" *)
  output [127:0] data_o;
  (* src = "mixcolum.v:74.13-74.23" *)
  wire [127:0] data_o_reg;
  (* src = "mixcolum.v:72.13-72.21" *)
  wire [127:0] data_reg;
  (* src = "mixcolum.v:63.7-63.16" *)
  input decrypt_i;
  (* src = "mixcolum.v:75.13-75.24" *)
  wire [127:0] next_data_o;
  (* src = "mixcolum.v:73.13-73.26" *)
  wire [127:0] next_data_reg;
  (* src = "mixcolum.v:76.5-76.17" *)
  wire next_ready_o;
  (* src = "mixcolum.v:78.11-78.21" *)
  wire [1:0] next_state;
  (* src = "mixcolum.v:84.12-84.18" *)
  wire [31:0] outmux;
  (* src = "mixcolum.v:80.13-80.17" *)
  wire [31:0] outx;
  (* src = "mixcolum.v:81.13-81.17" *)
  wire [31:0] outy;
  (* src = "mixcolum.v:66.8-66.15" *)
  output ready_o;
  reg ready_o;
  (* src = "mixcolum.v:62.7-62.12" *)
  input reset;
  (* src = "mixcolum.v:64.7-64.14" *)
  input start_i;
  (* src = "mixcolum.v:77.11-77.16" *)
  reg [1:0] state/*verilator public*/;
  assign _03_ = state[0] | state[1];
  assign _00_ = _03_ | start_i;
  assign next_ready_o = state[0] & state[1];
  assign _01_ = state[1] & ~(state[0]);
  assign _02_ = ~(state[0] | state[1]);
  assign next_state[0] = _02_ | _01_;
  assign next_state[1] = state[0] ^ state[1];
  (* src = "mixcolum.v:107.1-128.4" *)
  always @(posedge clk, negedge reset)
    if (!reset) ready_o <= 1'h0;
    else ready_o <= next_ready_o;
  (* src = "mixcolum.v:107.1-128.4" *)
  always @(posedge clk, negedge reset)
    if (!reset) state[0] <= 1'h0;
    else if (_00_) state[0] <= next_state[0];
  (* src = "mixcolum.v:107.1-128.4" *)
  always @(posedge clk, negedge reset)
    if (!reset) state[1] <= 1'h0;
    else if (_00_) state[1] <= next_state[1];
  assign data_i_var = data_i;
  assign data_o = 128'h00000000000000000000000000000000;
  assign data_o_reg = 128'h00000000000000000000000000000000;
  assign data_reg = 128'h000000000000000000000000xxxxxxxx;
  assign next_data_o = 128'h000000000000000000000000xxxxxxxx;
  assign next_data_reg = 128'hxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
  assign outmux = 32'hxxxxxxxx;
  assign outx = 32'hxxxxxxxx;
  assign outy = 32'hxxxxxxxx;
endmodule
